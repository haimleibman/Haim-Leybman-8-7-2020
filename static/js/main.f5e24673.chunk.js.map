{"version":3,"sources":["serviceWorker.ts","app/Navigation/Navigation.tsx","app/Header/Header.tsx","app/staticStore.ts","app/common/store.ts","app/AsyncAutocomplete/AsyncAutocomplete.tsx","app/common/iconUrlHook.tsx","app/CurrentWeather/CurrentWeather.tsx","app/DayWeather/DayWeather.tsx","app/Forecasts/Forecasts.tsx","app/WeatherDetailsContainer/WeatherDetailsContainer.tsx","app/Favorites/Favorites.tsx","app/Layout/Layout.tsx","index.tsx","app/Navigation/Navigation.module.scss","app/CurrentWeather/CurrentWeather.module.scss","app/Layout/Layout.module.scss","app/Header/Header.module.scss","app/WeatherDetailsContainer/WeatherDetailsContainer.module.scss","app/DayWeather/DayWeather.module.scss","app/AsyncAutocomplete/AsyncAutocomplete.module.scss","app/Forecasts/Forecasts.module.scss"],"names":["Boolean","window","location","hostname","match","Navigation","useState","value","setValue","ButtonGroup","className","styles","navButtonsContainer","variant","color","aria-label","Button","classNames","navButton","selected","onClick","to","LocationOn","text","Favorite","Header","AppBar","position","header","title","WEATHER_API_KEY","GET_CITIES_URL","GET_CITY_WEATHER_URL_PREFIX","GET_CITY_WEATHER_URL_SUFFIX","GET_5DAY_WEATHER_URL_PREFIX","GET_5DAY_WEATHER_URL_SUFFFIX","Cities","atom","key","default","SelectedCity","Key","LocalizedName","FavoriteCities","AsynAutocomplete","open","setOpen","setText","loading","setLoading","useRecoilState","cities","setCities","setSelectedCityKey","useSetRecoilState","useEffect","a","Axios","get","data","previous","concat","Autocomplete","autocomplete","onOpen","onClose","getOptionSelected","option","getOptionLabel","options","renderInput","params","TextField","label","onChange","event","target","InputProps","endAdornment","CircularProgress","size","useIconUrl","iconId","iconUrl","setIconUrl","idForUrl","toString","length","CurrentWeather","presentCity","setPresentCity","city","useRecoilValue","WeatherIcon","currentWeather","icon","src","alt","degree","Temperature","Metric","Value","description","WeatherText","DayWeather","props","dayWrather","minDegree","maxDegree","Forecasts","selectedCity","days","setDays","forecasts","map","day","i","weatherProps","Date","substring","Day","Icon","Maximum","Minimum","WeatherDetailsContainer","favorites","setFavorites","currentCity","container","favoritesButton","includes","withoutCurrentCity","filter","_","FavoriteBorder","tempFavorites","newFavorites","shift","Favorites","favoriteCities","Layout","path","root","body","render","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.f5e24673.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport styles from './Navigation.module.scss';\r\nimport {Favorite, LocationOn} from '@material-ui/icons';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport classNames from 'classnames';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navigation = () => {\r\n    const [value, setValue] = useState('Local Weather');\r\n\r\n    return <ButtonGroup className={styles.navButtonsContainer} variant=\"text\" color=\"inherit\" aria-label=\"text primary button group\">\r\n    <Button className={classNames(styles.navButton, {[styles.selected]: value === 'Local Weather'})} onClick={() => setValue('Local Weather')}>\r\n      <Link to='/home'>\r\n        <LocationOn/>\r\n        <p className={styles.text}>Local Weather</p>\r\n      </Link>\r\n    </Button>\r\n    <Button className={classNames(styles.navButton, {[styles.selected]: value === 'Favorite'})} onClick={() => setValue('Favorite')}>\r\n      <Link to='/favorites'>\r\n        <Favorite/>\r\n        <p className={styles.text}>Favorite</p>\r\n      </Link>\r\n    </Button>\r\n  </ButtonGroup>\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport styles from './Header.module.scss';\r\nimport {AppBar} from '@material-ui/core';\r\nimport Navigation from '../Navigation/Navigation';\r\n\r\nconst Header = () => {\r\n    return <AppBar position=\"static\" className={styles.header}>\r\n        <div className={styles.title}>\r\n            Weather App\r\n        </div>\r\n\r\n        <Navigation />\r\n    </AppBar>\r\n}\r\n\r\nexport default Header;","const WEATHER_API_KEY: string = 'vcU4ppZOKHGMh6TUIfo2YqOaPh6e8vU6';\r\nconst WEATHER_API_URL_BASE: string = 'http://dataservice.accuweather.com/';\r\n\r\nexport const GET_CITIES_URL: string = `${WEATHER_API_URL_BASE}locations/v1/cities/autocomplete?apikey=${WEATHER_API_KEY}&q=`;\r\n\r\nexport const GET_CITY_WEATHER_URL_PREFIX: string = `${WEATHER_API_URL_BASE}currentconditions/v1/`;\r\nexport const GET_CITY_WEATHER_URL_SUFFIX: string = `?apikey=${WEATHER_API_KEY}&details=true`;\r\n\r\nexport const GET_5DAY_WEATHER_URL_PREFIX: string = `${WEATHER_API_URL_BASE}forecasts/v1/daily/5day/`;\r\nexport const GET_5DAY_WEATHER_URL_SUFFFIX: string = `?apikey=${WEATHER_API_KEY}&metric=true`;\r\n","import { City } from './../models/city';\r\nimport { atom } from 'recoil';\r\n\r\n\r\nexport const Cities = atom<City[]>({\r\n  key: 'cities',\r\n  default: []\r\n});\r\n\r\nexport const SelectedCity = atom<City>({\r\n  key: 'selectedCity',\r\n  default: {Key: '215854', LocalizedName: 'Tel Aviv'}\r\n});\r\n\r\nexport const FavoriteCities = atom<City[]>({\r\n  key: 'favorites',\r\n  default: []\r\n});","import Axios from 'axios';\r\nimport React, { useState, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { GET_CITIES_URL } from '../staticStore';\r\nimport { useSetRecoilState, useRecoilState } from 'recoil';\r\nimport { Cities, SelectedCity } from '../common/store';\r\nimport styles from './AsyncAutocomplete.module.scss';\r\nimport { City } from '../models/city';\r\n\r\nexport default function AsynAutocomplete() {\r\n  const [open, setOpen] = useState(false);\r\n  const [text, setText] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [cities, setCities] = useRecoilState<City[]>(Cities);\r\n  const setSelectedCityKey = useSetRecoilState(SelectedCity);\r\n\r\n  useEffect((): void => {\r\n    (async () => {\r\n      if (!text)\r\n        return;\r\n\r\n      setLoading(true);\r\n      const {data} = await Axios.get(`${GET_CITIES_URL}${text}&language=en-us`);\r\n\r\n      setLoading(false);\r\n\r\n      setCities(previous => previous.concat(data));\r\n    })();\r\n  }, [setCities, text]);\r\n\r\n  const getSelected = (option: City, value: City) => {\r\n    setSelectedCityKey(option);\r\n    return option.LocalizedName === value.LocalizedName\r\n  }\r\n\r\n  return (\r\n    <Autocomplete\r\n      className={styles.autocomplete}\r\n      open={open}\r\n      onOpen={() => setOpen(true)}\r\n      onClose={() => setOpen(false)}\r\n      getOptionSelected={getSelected}\r\n      getOptionLabel={(option) => option.LocalizedName}\r\n      options={text ? cities : []}\r\n      loading={loading}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Search a city\"\r\n          variant=\"filled\"\r\n          onChange={event => setText(event.target.value)}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <>\r\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}","import { useEffect, useState } from 'react';\r\n\r\nconst useIconUrl = (iconId: number) => {\r\n    const [iconUrl, setIconUrl] = useState('');\r\n\r\n    useEffect(() => {\r\n        const idForUrl = iconId?.toString().length > 1 ? iconId : (\"0\" + iconId)\r\n        setIconUrl(`https://developer.accuweather.com/sites/default/files/${idForUrl}-s.png`)\r\n    }, [iconId])\r\n\r\n    return iconUrl\r\n}\r\n\r\nexport default useIconUrl;","import React, { useState, useEffect } from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { SelectedCity } from '../common/store';\r\nimport Axios from 'axios';\r\nimport { GET_CITY_WEATHER_URL_PREFIX, GET_CITY_WEATHER_URL_SUFFIX } from '../staticStore';\r\nimport { CityWeatherDetails } from '../models/cityWeatherDetails';\r\nimport styles from './CurrentWeather.module.scss';\r\nimport useIconUrl from '../common/iconUrlHook';\r\n\r\nconst CurrentWeather = () => {\r\n    const [presentCity, setPresentCity] = useState({});\r\n    const city = useRecoilValue(SelectedCity);\r\n\r\n    useEffect((): void => {\r\n        (async () => {\r\n            const {data} = await Axios.get(`${GET_CITY_WEATHER_URL_PREFIX}${city.Key}${GET_CITY_WEATHER_URL_SUFFIX}`);\r\n\r\n            setPresentCity(data[0]);\r\n        })()\r\n    }, [city])\r\n\r\n    const iconUrl = useIconUrl((presentCity as CityWeatherDetails).WeatherIcon);\r\n\r\n    return <div className={styles.currentWeather}>\r\n        <div className={styles.city}>{city.LocalizedName}</div>\r\n        <img className={styles.icon} src={iconUrl} alt='Waether icon'/>\r\n        <div className={styles.degree}>{(presentCity as CityWeatherDetails)?.Temperature?.Metric?.Value} c</div>\r\n        <div className={styles.description}>{(presentCity as CityWeatherDetails)?.WeatherText}</div>\r\n    </div>\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from 'react';\r\nimport styles from './DayWeather.module.scss';\r\nimport { DayWeatherProps } from '../models/dayWeatherProps.model';\r\nimport useIconUrl from '../common/iconUrlHook';\r\n\r\nconst DayWeather = (props: DayWeatherProps) => {\r\n    const iconUrl = useIconUrl(props.iconId);\r\n\r\n    return <div className={styles.dayWrather}>\r\n        <header className={styles.header}>{props.header}</header>\r\n        <img src={iconUrl} alt=\"Weather Icon\"/>\r\n        <div>{props.minDegree} | {props.maxDegree}</div>\r\n    </div>\r\n}\r\n\r\nexport default DayWeather;","import React, { useEffect, useState } from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { SelectedCity } from '../common/store';\r\nimport Axios from 'axios';\r\nimport { GET_5DAY_WEATHER_URL_PREFIX, GET_5DAY_WEATHER_URL_SUFFFIX } from '../staticStore';\r\nimport DayWeather from '../DayWeather/DayWeather';\r\nimport { DayWeatherProps } from '../models/dayWeatherProps.model';\r\nimport styles from './Forecasts.module.scss';\r\nimport { DayForecast } from '../models/dayForecost.model';\r\n\r\nconst Forecasts = () => {\r\n    const selectedCity = useRecoilValue(SelectedCity);\r\n    const [days, setDays] = useState<DayForecast[]>([]);\r\n\r\n  useEffect((): void => {\r\n    (async () => {\r\n      const {data} = await Axios.get(`${GET_5DAY_WEATHER_URL_PREFIX}${selectedCity.Key}${GET_5DAY_WEATHER_URL_SUFFFIX}`);\r\n\r\n      setDays(data[\"DailyForecasts\"]);\r\n    })();\r\n  }, [selectedCity]);\r\n\r\n\r\n  const convertDayDateToWaetherProps = (props: DayForecast): DayWeatherProps => {\r\n      return {\r\n          header: props.Date.substring(5,10),\r\n          iconId: props.Day.Icon,\r\n          maxDegree: props.Temperature.Maximum.Value,\r\n          minDegree: props.Temperature.Minimum.Value\r\n      };\r\n  }\r\n\r\n  return <div className={styles.forecasts}>\r\n        {days.map((day, i) => {\r\n            const weatherProps = convertDayDateToWaetherProps(day);\r\n            return <DayWeather key={i} {...weatherProps} /> \r\n        })}\r\n    </div> \r\n}\r\n\r\nexport default Forecasts;","import React from 'react';\r\nimport styles from './WeatherDetailsContainer.module.scss';\r\nimport { Paper } from '@material-ui/core';\r\nimport CurrentWeather from '../CurrentWeather/CurrentWeather';\r\nimport Forecasts from '../Forecasts/Forecasts';\r\nimport { FavoriteBorder, Favorite } from '@material-ui/icons';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport { FavoriteCities, SelectedCity } from '../common/store';\r\nimport { City } from '../models/city';\r\n\r\n\r\nexport const WeatherDetailsContainer = () => {\r\n    const [favorites, setFavorites] = useRecoilState(FavoriteCities);\r\n    const currentCity = useRecoilValue(SelectedCity);\r\n\r\n    const upsertFavorites = () => {\r\n        const tempFavorites: City[] = [...favorites, currentCity];\r\n        const newFavorites: City[] = favorites.length < 5 ? tempFavorites : (() => {\r\n            tempFavorites.shift();\r\n            return tempFavorites;\r\n        })();\r\n        setFavorites(newFavorites);\r\n    }\r\n\r\n    const deleteFromFavorites = () => {\r\n        const withoutCurrentCity = favorites.filter(_ => _.Key !== currentCity.Key)\r\n        setFavorites(withoutCurrentCity);\r\n    }\r\n\r\n    return <div className={styles.container}>\r\n        <div className={styles.favoritesButton}>\r\n            {favorites.includes(currentCity) ? \r\n                <Favorite onClick={deleteFromFavorites}/>\r\n                : <FavoriteBorder onClick={upsertFavorites}/>\r\n            }\r\n        </div>\r\n        <CurrentWeather />\r\n        <Forecasts />\r\n    </div>\r\n};\r\n","import React from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { FavoriteCities } from '../common/store';\r\n\r\nconst Favorites = () => {\r\n    const favoriteCities = useRecoilValue(FavoriteCities);\r\n\r\n    return <div>\r\n        {favoriteCities.map(city => city.LocalizedName)}\r\n    </div>\r\n}\r\n\r\nexport default Favorites;","import React from 'react';\r\nimport styles from './Layout.module.scss';\r\nimport Header from '../Header/Header';\r\nimport AsyncAutocomplete from '../AsyncAutocomplete/AsyncAutocomplete';\r\nimport { WeatherDetailsContainer } from '../WeatherDetailsContainer/WeatherDetailsContainer';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport Favorites from '../Favorites/Favorites';\r\n\r\nconst Layout = () => {\r\n    return <Router>\r\n    <Header/>\r\n        <Switch>\r\n            <Route path=\"/home\">\r\n                <div className={styles.root}>\r\n                    <div className={styles.body}>\r\n                        <AsyncAutocomplete/>\r\n                        <WeatherDetailsContainer/>\r\n                    </div>\r\n                </div>\r\n            </Route>\r\n            <Route path=\"/favorites\">\r\n                <Favorites />\r\n            </Route>\r\n            <Route path=\"*\" render={() => <Redirect to=\"/home\" />} />\r\n        </Switch>\r\n    </Router>\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Layout from './app/Layout/Layout';\r\nimport { RecoilRoot } from 'recoil';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <Layout />\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navButtonsContainer\":\"Navigation_navButtonsContainer__1w3BW\",\"navButton\":\"Navigation_navButton__1RB8w\",\"selected\":\"Navigation_selected__1yivo\",\"text\":\"Navigation_text__bIsMy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentWeather\":\"CurrentWeather_currentWeather__23SgT\",\"city\":\"CurrentWeather_city__3t15C\",\"icon\":\"CurrentWeather_icon__3RI7c\",\"degree\":\"CurrentWeather_degree__2APO1\",\"description\":\"CurrentWeather_description__2vpei\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Layout_root__3LIBh\",\"body\":\"Layout_body__fc1n1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2KbHt\",\"title\":\"Header_title__1Is28\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"WeatherDetailsContainer_container__1alxk\",\"favoritesButton\":\"WeatherDetailsContainer_favoritesButton__TODZc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dayWrather\":\"DayWeather_dayWrather__qSSUs\",\"header\":\"DayWeather_header__2lj_h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autocomplete\":\"AsyncAutocomplete_autocomplete__2BrvA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forecasts\":\"Forecasts_forecasts__1S9aR\"};"],"sourceRoot":""}